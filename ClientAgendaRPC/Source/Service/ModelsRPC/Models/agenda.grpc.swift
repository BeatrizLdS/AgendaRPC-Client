//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: agenda.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Agenda_AgendaServiceClient`, then call methods of this protocol to make API calls.
internal protocol Agenda_AgendaServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Agenda_AgendaServiceClientInterceptorFactoryProtocol? { get }

  func checkConnection(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Agenda_Response>

  func getAllContacts(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Agenda_ContactsList>

  func addContact(
    _ request: Agenda_Contact,
    callOptions: CallOptions?
  ) -> UnaryCall<Agenda_Contact, Agenda_Response>

  func removeContact(
    _ request: Agenda_Contact,
    callOptions: CallOptions?
  ) -> UnaryCall<Agenda_Contact, Agenda_Response>

  func updateContact(
    _ request: Agenda_Contact,
    callOptions: CallOptions?
  ) -> UnaryCall<Agenda_Contact, Agenda_Response>
}

extension Agenda_AgendaServiceClientProtocol {
  internal var serviceName: String {
    return "agenda.AgendaService"
  }

  /// Unary call to CheckConnection
  ///
  /// - Parameters:
  ///   - request: Request to send to CheckConnection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func checkConnection(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Agenda_Response> {
    return self.makeUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.checkConnection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckConnectionInterceptors() ?? []
    )
  }

  /// Unary call to GetAllContacts
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllContacts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllContacts(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Agenda_ContactsList> {
    return self.makeUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.getAllContacts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllContactsInterceptors() ?? []
    )
  }

  /// Unary call to AddContact
  ///
  /// - Parameters:
  ///   - request: Request to send to AddContact.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addContact(
    _ request: Agenda_Contact,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Agenda_Contact, Agenda_Response> {
    return self.makeUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.addContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddContactInterceptors() ?? []
    )
  }

  /// Unary call to RemoveContact
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveContact.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeContact(
    _ request: Agenda_Contact,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Agenda_Contact, Agenda_Response> {
    return self.makeUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.removeContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveContactInterceptors() ?? []
    )
  }

  /// Unary call to UpdateContact
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateContact.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateContact(
    _ request: Agenda_Contact,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Agenda_Contact, Agenda_Response> {
    return self.makeUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.updateContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateContactInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Agenda_AgendaServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Agenda_AgendaServiceNIOClient")
internal final class Agenda_AgendaServiceClient: Agenda_AgendaServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Agenda_AgendaServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Agenda_AgendaServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the agenda.AgendaService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Agenda_AgendaServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Agenda_AgendaServiceNIOClient: Agenda_AgendaServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Agenda_AgendaServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the agenda.AgendaService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Agenda_AgendaServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Agenda_AgendaServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Agenda_AgendaServiceClientInterceptorFactoryProtocol? { get }

  func makeCheckConnectionCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Agenda_Response>

  func makeGetAllContactsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Agenda_ContactsList>

  func makeAddContactCall(
    _ request: Agenda_Contact,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Agenda_Contact, Agenda_Response>

  func makeRemoveContactCall(
    _ request: Agenda_Contact,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Agenda_Contact, Agenda_Response>

  func makeUpdateContactCall(
    _ request: Agenda_Contact,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Agenda_Contact, Agenda_Response>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Agenda_AgendaServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Agenda_AgendaServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Agenda_AgendaServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCheckConnectionCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Agenda_Response> {
    return self.makeAsyncUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.checkConnection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckConnectionInterceptors() ?? []
    )
  }

  internal func makeGetAllContactsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Agenda_ContactsList> {
    return self.makeAsyncUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.getAllContacts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllContactsInterceptors() ?? []
    )
  }

  internal func makeAddContactCall(
    _ request: Agenda_Contact,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Agenda_Contact, Agenda_Response> {
    return self.makeAsyncUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.addContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddContactInterceptors() ?? []
    )
  }

  internal func makeRemoveContactCall(
    _ request: Agenda_Contact,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Agenda_Contact, Agenda_Response> {
    return self.makeAsyncUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.removeContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveContactInterceptors() ?? []
    )
  }

  internal func makeUpdateContactCall(
    _ request: Agenda_Contact,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Agenda_Contact, Agenda_Response> {
    return self.makeAsyncUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.updateContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateContactInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Agenda_AgendaServiceAsyncClientProtocol {
  internal func checkConnection(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Agenda_Response {
    return try await self.performAsyncUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.checkConnection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckConnectionInterceptors() ?? []
    )
  }

  internal func getAllContacts(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Agenda_ContactsList {
    return try await self.performAsyncUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.getAllContacts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllContactsInterceptors() ?? []
    )
  }

  internal func addContact(
    _ request: Agenda_Contact,
    callOptions: CallOptions? = nil
  ) async throws -> Agenda_Response {
    return try await self.performAsyncUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.addContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddContactInterceptors() ?? []
    )
  }

  internal func removeContact(
    _ request: Agenda_Contact,
    callOptions: CallOptions? = nil
  ) async throws -> Agenda_Response {
    return try await self.performAsyncUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.removeContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveContactInterceptors() ?? []
    )
  }

  internal func updateContact(
    _ request: Agenda_Contact,
    callOptions: CallOptions? = nil
  ) async throws -> Agenda_Response {
    return try await self.performAsyncUnaryCall(
      path: Agenda_AgendaServiceClientMetadata.Methods.updateContact.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateContactInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Agenda_AgendaServiceAsyncClient: Agenda_AgendaServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Agenda_AgendaServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Agenda_AgendaServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Agenda_AgendaServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'checkConnection'.
  func makeCheckConnectionInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Agenda_Response>]

  /// - Returns: Interceptors to use when invoking 'getAllContacts'.
  func makeGetAllContactsInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Agenda_ContactsList>]

  /// - Returns: Interceptors to use when invoking 'addContact'.
  func makeAddContactInterceptors() -> [ClientInterceptor<Agenda_Contact, Agenda_Response>]

  /// - Returns: Interceptors to use when invoking 'removeContact'.
  func makeRemoveContactInterceptors() -> [ClientInterceptor<Agenda_Contact, Agenda_Response>]

  /// - Returns: Interceptors to use when invoking 'updateContact'.
  func makeUpdateContactInterceptors() -> [ClientInterceptor<Agenda_Contact, Agenda_Response>]
}

internal enum Agenda_AgendaServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AgendaService",
    fullName: "agenda.AgendaService",
    methods: [
      Agenda_AgendaServiceClientMetadata.Methods.checkConnection,
      Agenda_AgendaServiceClientMetadata.Methods.getAllContacts,
      Agenda_AgendaServiceClientMetadata.Methods.addContact,
      Agenda_AgendaServiceClientMetadata.Methods.removeContact,
      Agenda_AgendaServiceClientMetadata.Methods.updateContact,
    ]
  )

  internal enum Methods {
    internal static let checkConnection = GRPCMethodDescriptor(
      name: "CheckConnection",
      path: "/agenda.AgendaService/CheckConnection",
      type: GRPCCallType.unary
    )

    internal static let getAllContacts = GRPCMethodDescriptor(
      name: "GetAllContacts",
      path: "/agenda.AgendaService/GetAllContacts",
      type: GRPCCallType.unary
    )

    internal static let addContact = GRPCMethodDescriptor(
      name: "AddContact",
      path: "/agenda.AgendaService/AddContact",
      type: GRPCCallType.unary
    )

    internal static let removeContact = GRPCMethodDescriptor(
      name: "RemoveContact",
      path: "/agenda.AgendaService/RemoveContact",
      type: GRPCCallType.unary
    )

    internal static let updateContact = GRPCMethodDescriptor(
      name: "UpdateContact",
      path: "/agenda.AgendaService/UpdateContact",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Agenda_AgendaServiceProvider: CallHandlerProvider {
  var interceptors: Agenda_AgendaServiceServerInterceptorFactoryProtocol? { get }

  func checkConnection(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Agenda_Response>

  func getAllContacts(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Agenda_ContactsList>

  func addContact(request: Agenda_Contact, context: StatusOnlyCallContext) -> EventLoopFuture<Agenda_Response>

  func removeContact(request: Agenda_Contact, context: StatusOnlyCallContext) -> EventLoopFuture<Agenda_Response>

  func updateContact(request: Agenda_Contact, context: StatusOnlyCallContext) -> EventLoopFuture<Agenda_Response>
}

extension Agenda_AgendaServiceProvider {
  internal var serviceName: Substring {
    return Agenda_AgendaServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CheckConnection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Agenda_Response>(),
        interceptors: self.interceptors?.makeCheckConnectionInterceptors() ?? [],
        userFunction: self.checkConnection(request:context:)
      )

    case "GetAllContacts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Agenda_ContactsList>(),
        interceptors: self.interceptors?.makeGetAllContactsInterceptors() ?? [],
        userFunction: self.getAllContacts(request:context:)
      )

    case "AddContact":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Agenda_Contact>(),
        responseSerializer: ProtobufSerializer<Agenda_Response>(),
        interceptors: self.interceptors?.makeAddContactInterceptors() ?? [],
        userFunction: self.addContact(request:context:)
      )

    case "RemoveContact":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Agenda_Contact>(),
        responseSerializer: ProtobufSerializer<Agenda_Response>(),
        interceptors: self.interceptors?.makeRemoveContactInterceptors() ?? [],
        userFunction: self.removeContact(request:context:)
      )

    case "UpdateContact":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Agenda_Contact>(),
        responseSerializer: ProtobufSerializer<Agenda_Response>(),
        interceptors: self.interceptors?.makeUpdateContactInterceptors() ?? [],
        userFunction: self.updateContact(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Agenda_AgendaServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Agenda_AgendaServiceServerInterceptorFactoryProtocol? { get }

  func checkConnection(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Agenda_Response

  func getAllContacts(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Agenda_ContactsList

  func addContact(
    request: Agenda_Contact,
    context: GRPCAsyncServerCallContext
  ) async throws -> Agenda_Response

  func removeContact(
    request: Agenda_Contact,
    context: GRPCAsyncServerCallContext
  ) async throws -> Agenda_Response

  func updateContact(
    request: Agenda_Contact,
    context: GRPCAsyncServerCallContext
  ) async throws -> Agenda_Response
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Agenda_AgendaServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Agenda_AgendaServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Agenda_AgendaServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Agenda_AgendaServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CheckConnection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Agenda_Response>(),
        interceptors: self.interceptors?.makeCheckConnectionInterceptors() ?? [],
        wrapping: { try await self.checkConnection(request: $0, context: $1) }
      )

    case "GetAllContacts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Agenda_ContactsList>(),
        interceptors: self.interceptors?.makeGetAllContactsInterceptors() ?? [],
        wrapping: { try await self.getAllContacts(request: $0, context: $1) }
      )

    case "AddContact":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Agenda_Contact>(),
        responseSerializer: ProtobufSerializer<Agenda_Response>(),
        interceptors: self.interceptors?.makeAddContactInterceptors() ?? [],
        wrapping: { try await self.addContact(request: $0, context: $1) }
      )

    case "RemoveContact":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Agenda_Contact>(),
        responseSerializer: ProtobufSerializer<Agenda_Response>(),
        interceptors: self.interceptors?.makeRemoveContactInterceptors() ?? [],
        wrapping: { try await self.removeContact(request: $0, context: $1) }
      )

    case "UpdateContact":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Agenda_Contact>(),
        responseSerializer: ProtobufSerializer<Agenda_Response>(),
        interceptors: self.interceptors?.makeUpdateContactInterceptors() ?? [],
        wrapping: { try await self.updateContact(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Agenda_AgendaServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'checkConnection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCheckConnectionInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Agenda_Response>]

  /// - Returns: Interceptors to use when handling 'getAllContacts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAllContactsInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Agenda_ContactsList>]

  /// - Returns: Interceptors to use when handling 'addContact'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddContactInterceptors() -> [ServerInterceptor<Agenda_Contact, Agenda_Response>]

  /// - Returns: Interceptors to use when handling 'removeContact'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveContactInterceptors() -> [ServerInterceptor<Agenda_Contact, Agenda_Response>]

  /// - Returns: Interceptors to use when handling 'updateContact'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateContactInterceptors() -> [ServerInterceptor<Agenda_Contact, Agenda_Response>]
}

internal enum Agenda_AgendaServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AgendaService",
    fullName: "agenda.AgendaService",
    methods: [
      Agenda_AgendaServiceServerMetadata.Methods.checkConnection,
      Agenda_AgendaServiceServerMetadata.Methods.getAllContacts,
      Agenda_AgendaServiceServerMetadata.Methods.addContact,
      Agenda_AgendaServiceServerMetadata.Methods.removeContact,
      Agenda_AgendaServiceServerMetadata.Methods.updateContact,
    ]
  )

  internal enum Methods {
    internal static let checkConnection = GRPCMethodDescriptor(
      name: "CheckConnection",
      path: "/agenda.AgendaService/CheckConnection",
      type: GRPCCallType.unary
    )

    internal static let getAllContacts = GRPCMethodDescriptor(
      name: "GetAllContacts",
      path: "/agenda.AgendaService/GetAllContacts",
      type: GRPCCallType.unary
    )

    internal static let addContact = GRPCMethodDescriptor(
      name: "AddContact",
      path: "/agenda.AgendaService/AddContact",
      type: GRPCCallType.unary
    )

    internal static let removeContact = GRPCMethodDescriptor(
      name: "RemoveContact",
      path: "/agenda.AgendaService/RemoveContact",
      type: GRPCCallType.unary
    )

    internal static let updateContact = GRPCMethodDescriptor(
      name: "UpdateContact",
      path: "/agenda.AgendaService/UpdateContact",
      type: GRPCCallType.unary
    )
  }
}
